fullscreen on/of - levý+pravý ctrl + F

YCSB - https://github.com/brianfrankcooper/YCSB


bin/ycsb.sh load basic -P workloads/workloada
bin/ycsb.sh run basic -P workloads/workloada





WINDOWS

%JAVA_HOME%="C:\Program Files\Java\jdk1.8.0_231"
	
YCSB

E:
cd E:\Diploma\YCSB\ycsb-0.17.0
cd E:\Diploma\YCSB\ycsb-0.17.0\bin

bin\ycsb.bat load basic -P workloads\workloada
bin\ycsb.bat run basic -P workloads\workloada

DOCKER 
	Redis
		- .\ycsb load redis -P  ..\workloads\workloada -p redis.host=127.0.0.1 -p redis.port=6379 > out\outredisload.txt
		- set port v dockeru na 6379
		- docker exec -it sad_colden redis-cli

	Aerospike
		- .\ycsb load aerospike -s -P ..\workloads\workloada -p as.namespace=test
		- set port na 3000, zbylé 2 jsou we
		- důležité použít namespace název! takže ne default ycsb ale test => as.namespace=test
		- docker exec -it aerospike bash -c aql
	
	Riak
		- .\ycsb load riak -s -P ..\workloads\workloada
		- v riak.conf souboru nastavit storage_backend = leveldb
		- v riak.conf souboru odkomentovat strong_consistency=on	// etc/riak/riak.conf
		- spustit příkazy:
			docker exec riak riak-admin bucket-type create ycsb		// '{"props":{"consistent":true}}' <-- vrací json error, odebrat
			docker exec riak riak-admin bucket-type activate ycsb
		- nastavit porty 8087 a 8098, a container name na riak
		- docker exec riak riak config effective
	
Amazon DynamoDB
	- .\ycsb load dynamodb -s -P ..\workloads\workloada
	- docker run --rm -d --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal
	- docker, nastavit port 8000
	- http://highscalability.com/blog/2013/4/3/5-steps-to-benchmarking-managed-nosql-dynamodb-vs-cassandra.html
	- https://github.com/brianfrankcooper/YCSB/wiki/Using-the-Database-Libraries
	- https://stackoverflow.com/questions/45508588/docker-how-to-create-a-table-for-local-dynamo-db
	- https://www.youtube.com/watch?v=ZHMHQmCLakA
	- https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html
	- https://dev.to/aws-heroes/dynamodb-local-in-docker-25i
	
	
Oracle NoSQL
	- .\ycsb load nosqldb -s -P ..\workloads\workloada
	
	- docker run --rm -ti --link kvlite:store oracle/nosql:ce java -jar lib/kvstore.jar runadmin -port 5000 -host localhost -script $YCSBHOME/conf/script.txt
	
	- docker run --rm -ti --link kvlite:store oracle/nosql:ce java -jar lib/kvstore.jar runadmin -host store -port 5000 -store kvstore
	- docker run --rm -ti --link kvlite:store oracle/nosql:ce java -jar lib/kvstore.jar ping -host store -port 5000
	- docker run -d --name=kvlite --hostname=kvlite --env KV_PROXY_PORT=8080 -p 8080:8080 oracle/nosql:ce
	- https://github.com/oracle/docker-images/blob/main/NoSQL/README.md



citace:

https://medium.com/@erdmozdmir/benchmarking-with-yahoo-cloud-server-benchmark-ycsb-deac5e34f75d
https://www.youtube.com/watch?v=FQQk0I1Xk38
https://github.com/stutzlab/ycsb-stresser
https://vsis-www.informatik.uni-hamburg.de/getDoc.php/thesis/790/Bachelorarbeit_Mirko_Koester.pdf
http://highscalability.com/blog/2021/2/17/benchmark-ycsb-numbers-for-redis-mongodb-couchbase2-yugabyte.html
https://hrcak.srce.hr/file/340507
https://benchant.com/blog/ycsb
https://info.couchbase.com/rs/302-GJY-034/images/2023-Altoros-NoSQL-Dbaas-Performance-Capella-Atlas-Dynamo-Redis.pdf
https://developer.redis.com/create/windows/
https://www.msystechnologies.com/blog/4-steps-to-load-test-mongodb-using-ycsb-workloads-on-kubernetes-cluster/
https://www.researchgate.net/publication/362695031_INDIAN_JOURNAL_OF_SCIENCE_AND_TECHNOLOGY_A_Study_of_Performance_and_Comparison_of_NoSQL_Databases_MongoDB_Cassandra_and_Redis_Using_YCSB
https://docs.bangdb.com/bangdb-vs-other-dbs
